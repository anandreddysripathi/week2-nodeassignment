->A promise is a javascrpt object that runs a function and produces a value or returns a value irrespective of   whether the code is right or wrong.
->this is introduced to give a solution to a problem that occur in callback which is callback hell.
-> even if the code goes wrong inside a function then it returns an appripriate value which we assign for that  case.
->the piece of code inside the function is called executor
ex:
let promise = new Promise(function(resolve, reject) {
  //executor 
});

->The  promise object has internal properties:
 state — initially “pending”, then changes to either “fulfilled” or “rejected”,
 result — an arbitrary value of your choosing, initially undefined.

When the executor finishes the job, it should call one of the functions that it gets as arguments:

resolve(value) — to indicate that the job finished successfully:
sets state to "fulfilled",
sets result to value.
reject(error) — to indicate that an error occurred:
sets state to "rejected",
sets result to error. 

ex:
function readFile(filename, enc){
return new Promise(function(fulfill, reject){
    fs.readFile(filename, enc, function(err, res){
if (err) reject(err);
else fulfill(res);
    });});}

Advantages of promises:
->Better definition of control flow of asynchronous logic
->Reduced coupling
->Better error handling
->Improved readability
